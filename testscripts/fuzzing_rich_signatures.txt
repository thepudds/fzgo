# Test fuzzing rich sigs. We could assume go-fuzz and go-fuzz-build binaries are in the path,
# but we start these tests doing 'go get' on github.com/dvyukov/go-fuzz/... because we need
# the go-fuzz-dep source code to be findable by go-fuzz-build (when it invokes 'go list').
# Reminder: the tests here can be run by themselves from the fzgo directory via:
#    go test -run=TestScripts/fuzzing_rich_signatures .

# Exit early if -short was specified.
[short] skip 'skipping building instrumented binary because -short was specified'

# Explicitly set GO111MODULE off for now. (testscripts seemingly by design do not pick up this value from actual env).
env GO111MODULE=off

# get our dependencies. 
# it should be sufficient to get fzgo/randparam, rather than fzgo/...
# TODO: it would be better to use local copy. currently this gets the copy of fzgo/randparam from github.
go get -v -u github.com/thepudds/fzgo/randparam
go get -v -u github.com/google/gofuzz

# TODO: at some point between 2019-11-03 and 2020-02-15, this became a needed workaround.
go get -v -u golang.org/x/mod/...

# Get go-fuzz (go-fuzz-dep needed by go-fuzz-build).
go get -v -u github.com/dvyukov/go-fuzz/...
go install github.com/dvyukov/go-fuzz/...

# Verify the go-fuzz binaries seem to exist in our test environment
exists $WORK/gopath/bin/go-fuzz$exe
exists $WORK/gopath/bin/go-fuzz-build$exe

# Check we can get a crasher relatively quickly by finding a 64 bit int via a rich signature, which
# should imply go-fuzz literal injection is working end-to-end with fzgo's rich signatures.
fzgo test -fuzz=FuzzHardToGuessNumber example.com/richsignatures -parallel=1 -fuzztime=10s
stdout 'building instrumented binary for pkgname.FuzzHardToGuessNumber'
stderr 'workers: \d+, corpus: .* crashers: [^0]'
exists $WORK/gopath/pkg/fuzz/corpus/example.com/richsignatures/FuzzHardToGuessNumber/corpus

# Check we can get a crasher relatively quickly by finding a long string via a rich signature, which
# is harder than the uint64 test. This relies on fzgo's approach
# to deserializing working well with go-fuzz sonar's approach for variable length strings.
# When working properly, this is typically found within 10 sec or so but sometimes 30 sec or so.
# This might have become slower between something like a March 2018 go-fuzz release vs. Aug 2018,
# but not clear. It might just instead have high variance.
# Also, versions after 'fc0bf08 go-fuzz-build: improve pkg resolution' avoid a gcc error that started
# some time prior to that. Spot checked go-fuzz commits 7f2a1780, fc0bf087,  193030f.
# go-fuzz-build with sha256 14288638034fb712... might have been faster than all of those.
# I was likely using 7f2a1780 previously. 
# Seemed to get good results with 7f2a1780 if:
#    used first byte for meta params, with 0x0 ==> fixed 2.
#    had the gofuzz edit: f.nilChance == 0.0 {	return true	}
# TODO: skipping harder FuzzHardToGuessStringInSlice for now, which is often 10-15 sec, 
# but the two strings in a slice version was sometimes slow and timed out on 1m, and similar for one string in a slice.
# fzgo test -fuzz=FuzzHardToGuessStringInSlice example.com/richsignatures -parallel=2 -v -fuzztime=1m
# stdout 'building instrumented binary for pkgname.FuzzHardToGuessStringInSlice'
# ! stdout 'randBytes verbose'
# stderr 'workers: \d+, corpus: .* crashers: [^0]'
# exists $WORK/gopath/pkg/fuzz/corpus/example.com/richsignatures/FuzzHardToGuessStringInSlice/corpus

# TODO: skipping single string example, which sometimes times out at 30s on travis on Windows.
# We simplified the test to one string for now.
# fzgo test -fuzz=FuzzHardToGuessString example.com/richsignatures -parallel=2 -v -fuzztime=30s
# stdout 'building instrumented binary for pkgname.FuzzHardToGuessString'
# ! stdout 'randBytes verbose'
# stderr 'workers: \d+, corpus: .* crashers: [^0]'
# exists $WORK/gopath/pkg/fuzz/corpus/example.com/richsignatures/FuzzHardToGuessString/corpus

# Verify with no fzgo cache that we build the instrumented binary from scratch.
# This also creates our corpus directory in the default location.
# We also specify -parallel=1 to reduce CPU usage for our remaining tests.
fzgo test -fuzz=FuzzWithBasicTypes example.com/richsignatures -parallel=1 -fuzztime=5s
stdout 'building instrumented binary for pkgname.FuzzWithBasicTypes'
stderr 'workers: \d+, corpus: '
exists $WORK/gopath/pkg/fuzz/corpus/example.com/richsignatures/FuzzWithBasicTypes/corpus

# Verify we now we use the fzgo cache.
# We also specify -parallel=1 to reduce CPU usage for our remaining tests.
fzgo test -fuzz=FuzzWithBasicTypes example.com/richsignatures -parallel=1 -fuzztime=5s
stdout 'fzgo: using cached instrumented binary for pkgname.FuzzWithBasicTypes'
stderr 'workers: \d+, corpus: '

# Flag -fuzzdir controls where the corpus goes (which could be in a different repo). 
# This invocation still uses the cache, as do all subsequent invocations in this script.
fzgo test -fuzz=FuzzWithBasicTypes example.com/richsignatures -parallel=1 -fuzztime=5s -fuzzdir=$WORK/myfuzzdir
stdout 'fzgo: using cached instrumented binary for pkgname.FuzzWithBasicTypes'
stderr 'workers: \d+, corpus: '
exists $WORK/myfuzzdir/example.com/richsignatures/FuzzWithBasicTypes/corpus

# Check rich signature from stdlib (uses regexp)
fzgo test -fuzz=FuzzWithStdlibType example.com/richsignatures -parallel=1 -fuzztime=5s
stdout 'building instrumented binary for pkgname.FuzzWithStdlibType'
stderr 'workers: \d+, corpus: '
exists $WORK/gopath/pkg/fuzz/corpus/example.com/richsignatures/FuzzWithStdlibType/corpus

# Verify we can use -run flag to select a specific file from the corpus for a rich signature.
# We will guess that we have a zero length file. (Probably it will consistently be there, but we'll see).
# This relies on go-fuzz SHA256 calc being stable.
# We are not time limiting this, so this also relies on us interpreting -run to mean verify corpus
# (otherwise, this will never return until the testscript package times out at 10 minutes or so).
fzgo test -v -run=TestCorpus/da39a3ee5e6b4 -fuzz=FuzzHardToGuessNumber example.com/richsignatures
stdout '=== RUN   TestCorpus/da39a3ee5e6b4'
stdout '--- PASS: TestCorpus/da39a3ee5e6b4'
stdout '^ok .*fzgo-verify-corpus'

# Check a signature that almost matches a plain 'func([]byte) int' signature.
fzgo test -fuzz=FuzzAlmostPlain example.com/richsignatures -parallel=1 -fuzztime=5s
stdout 'detected rich signature for pkgname.FuzzAlmostPlain'
stdout 'building instrumented binary for pkgname.FuzzAlmostPlain'
stderr 'workers: \d+, corpus: .*'

# NOTE: currently this is cloned from examples dir in fzgo repo. (Probably good to have locally here?)

-- gopath/src/example.com/richsignatures/richsignatures.go --
package pkgname

import (
	"regexp"

	"github.com/thepudds/fzgo/fuzz"
)

// FuzzWithBasicTypes is a fuzzing function written by a user
// that has a rich signature. All parameters are basic types,
// but is uses stdlib types within (regexp).
// We can fuzz it automatically, even though it doesn't match the standard []data
// signature. This is just a test -- the fuzzing itself is not of interest.
func FuzzWithBasicTypes(re string, input []byte, posix bool) (bool, error) {

	var r *regexp.Regexp
	var err error
	if posix {
		r, err = regexp.CompilePOSIX(re)
	} else {
		r, err = regexp.Compile(re)
	}
	if err != nil {
		return false, err
	}

	return r.Match(input), nil
}

// FuzzWithStdlibType is a test function using a combination of basic types
// and also one from the stdlib (regexp).
func FuzzWithStdlibType(something, another string, allow bool, re *regexp.Regexp) {
	regexp.MatchString(something, another)
}

// FuzzWithFzgoFunc uses a non-stdlib type
func FuzzWithFzgoFunc(f fuzz.Func) string {
	return f.String()
}

// ExampleType is defined in the same package as the fuzz target that uses it (next func below).
type ExampleType int

// FuzzWithTargetType shows a type defined in the same file as the fuzz function.
func FuzzWithTargetType(e ExampleType) {

}

// FuzzAlmostPlain excercises our rich sig detection logic slightly more as a "near miss" to an older-style sig.
func FuzzAlmostPlain(data []byte) string {
	return ""
}

// FuzzHardToGuessNumber is a sanity check that go-fuzz literal injection seems to be working end-to-end.
// This is typically found within a few seconds when properly hooked up.
func FuzzHardToGuessNumber(guessMe int64) {

	if guessMe == 0x123456789 {
		panic("bingo")
	}
}

// FuzzHardToGuessString is harder to get right, and relies on fzgo's approach
// to deserializing working well with go-fuzz sonar's approach for variable length strings.
// This is typically found within a few seconds when working properly.
// Note: the string length should <= 20 to work with sonar.
func FuzzHardToGuessString(s string) {
	if s == "ZZZ hard to guess" {
		panic("bingo")
	}
}

// FuzzHardToGuessStringInSlice is even harder to get right, and relies on fzgo's approach
// to deserializing working well with go-fuzz sonar's approach for variable length strings.
// This is typically found within a few seconds when working properly, but sometimes times out after 1m.
// Note: the string length should <= 20 to work with sonar.
func FuzzHardToGuessStringInSlice(list []string) {
	if len(list) > 0 && list[0] == "ZZZ hard to guess" {
		panic("bingo")
	}
}
