# Test package patterns like './...' vs. '.', including no package supplied.
# Rather than waiting for fuzzing to start, this is set up to have different
# package patterns trigger different failure modes to indicate that the patterns 
# are being interpreted as expected. 
#
# Initially, fzgo disallowed multiple fuzz functions to match (per the March 2017 proposal),
# but as an experiment fzgo now allows multiple fuzz functions to match in order to 
# support something like 'go test -fuzz=. ./...' when there are multiple fuzz functions
# across multiple packages. However, these tests were built before that change, 
# so we use the -debug=nomultifuzz option below to preserve the original behavior.

# Fail when more than one fuzz func matches in two different packages.
! fzgo test -fuzz=FuzzTwo ./... -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'
! fzgo test -fuzz=FuzzTwo sample/... -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'

# Fail with multiple matches no matter where the package pattern is in our args.
! fzgo test ./... -fuzz=FuzzTwo -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'
! fzgo test -fuzz=FuzzTwo -fuzztime=10s ./... -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'

# cd to a package directory that has two functions 'FuzzTime' and 'FuzzTwo'.
cd $WORK/gopath/src/sample/pkg1

# Fail with './...', '.', no pattern, or full path with '-fuzz=Fuzz' because two fuzz funcs match.
! fzgo test -fuzz=Fuzz -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'
! fzgo test -fuzz=Fuzz ./... -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed' 
! fzgo test -fuzz=Fuzz . -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'
! fzgo test -fuzz=Fuzz sample/pkg1 -fuzztime=10s -debug=nomultifuzz
stdout '^fzgo: multiple matches not allowed'

# Functions that don't exist should also be reported as errors with patterns './...', '.', full path, or no pattern.
! fzgo test -fuzz=DoesNotExist -fuzztime=10s
stdout 'fzgo: failed to find fuzz function for pattern'
! fzgo test -fuzz=DoesNotExist ./... -fuzztime=10s
stdout 'fzgo: failed to find fuzz function for pattern'
! fzgo test -fuzz=DoesNotExist . -fuzztime=10s
stdout 'fzgo: failed to find fuzz function for pattern'
! fzgo test -fuzz=DoesNotExist sample/pkg1 -fuzztime=10s
stdout 'fzgo: failed to find fuzz function for pattern'

# Two test files, with three fuzz funcs. The same test files are used in the fuzzing.txt test script.
# One file uses '+build fuzz', the other '+build gofuzz'.

-- gopath/src/sample/pkg1/fuzz.go --
// +build fuzz

package pkg1

import "time"

// FuzzTime is a very simple fuzzing function
func FuzzTime(data []byte) int {

	_, err := time.ParseDuration(string(data))

	if err != nil {
		return 1
	}
	return 0
}

// FuzzTwo is a placeholder fuzzing function, and has same name as func in pkg2
func FuzzTwo(data []byte) int {
	return 0
}

-- gopath/src/sample/pkg2/fuzz.go --
// +build gofuzz

package pkg2

// FuzzTwo is another placeholder fuzzing function, and has same name as func in pkg1
func FuzzTwo(data []byte) int {
	return 0
}
