# Test fuzzing. We could assume go-fuzz and go-fuzz-build binaries are in the path,
# but we start these tests doing 'go get' on github.com/dvyukov/go-fuzz/... because we need
# the go-fuzz-dep source code to be findable by go-fuzz-build (when it invokes 'go list').

# Exit early if -short was specified.
[short] skip 'skipping building instrumented binary because -short was specified'

# Get go-fuzz (go-fuzz-dep needed by go-fuzz-build).
go get -v -u github.com/dvyukov/go-fuzz/...
go install github.com/dvyukov/go-fuzz/...

# Verify the go-fuzz binaries seem to exist in our test environment
exists $WORK/gopath/bin/go-fuzz$exe
exists $WORK/gopath/bin/go-fuzz-build$exe

# First fuzz test: no fzgo cache, so we build the instrumented binary from scratch.
# This also creates our corpus directory in the default location.
fzgo test -fuzz=FuzzTime sample/pkg1 -fuzztime=10s
stdout 'building instrumented binary for pkg1.FuzzTime'
stderr 'workers: \d+, corpus: '
exists $WORK/gopath/src/sample/pkg1/testdata/fuzz/pkg1.FuzzTime/corpus

# Second fuzz test: now we use the fzgo cache.
# Even though -fuzz regexp and package pattern specified differently, they match the same package and func.
fzgo test -fuzz Time .../pkg1 -fuzztime 10s 
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stderr 'workers: \d+, corpus: '

# Third fuzz test: match two fuzz targets in pkg1.
# Order of which fuzz function goes first might not be deterministic,
# so check that one appears during the instrumentation phase and 
# the other appears later during the fuzzing phase, which should be deterministic.
fzgo test -fuzz=. .../pkg1 -fuzztime 10s 
stdout 'fzgo: building instrumented binary for pkg1.FuzzTwo'
stdout 'fzgo: starting fuzzing pkg1.FuzzTime'
stderr 'workers: \d+, corpus: '

# Flag -fuzzdir controls where the corpus goes (which could be in a different repo). 
# This invocation still uses the cache, as do all subsequent invocations in this script.
fzgo test -fuzz FuzzTime sample/pkg1 -fuzztime=10s -fuzzdir=$WORK/myfuzzdir
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stderr 'workers: \d+, corpus: '
exists $WORK/myfuzzdir/pkg1.FuzzTime/corpus

# Flag -parallel controls the worker count.
fzgo test -fuzz FuzzTime sample/pkg1 -fuzztime=10s -parallel=1 
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stderr 'workers: 1, corpus: '

# Flag --test.parallel also works.
fzgo test -fuzz FuzzTime sample/pkg1 -fuzztime=10s --test.parallel=2
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stderr 'workers: 2, corpus: '

# Flag -c asks to instrument and compile without running (so here we don't limit the duration with -fuzztime).
# TODO revisit what goes to stdout vs stderr
fzgo test -fuzz FuzzTime sample/pkg1 -c
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stdout 'fzgo: finished instrumenting binaries'
! stderr 'workers: \d+, corpus: '

# Flag -v outputs more verbose information when fuzzing.
fzgo test -fuzz FuzzTime sample/pkg1 -fuzztime=10s -parallel=1 -v
stdout 'fzgo: using cached instrumented binary for pkg1.FuzzTime'
stderr 'workers: 1, corpus: '

# Two test files, with three fuzz funcs. The same test files are used in the package_patterns.txt test script.
# One file uses '+build fuzz', the other '+build gofuzz'.

-- gopath/src/sample/pkg1/fuzz.go --
// +build fuzz

package pkg1

import "time"

// FuzzTime is a very simple fuzzing function
func FuzzTime(data []byte) int {

	_, err := time.ParseDuration(string(data))

	if err != nil {
		return 1
	}
	return 0
}

// FuzzTwo is a placeholder fuzzing function, and has same name as func in pkg2
func FuzzTwo(data []byte) int {
	return 0
}

-- gopath/src/sample/pkg2/fuzz.go --
// +build gofuzz

package pkg2

// FuzzTwo is another placeholder fuzzing function, and has same name as func in pkg1
func FuzzTwo(data []byte) int {
	return 0
}
